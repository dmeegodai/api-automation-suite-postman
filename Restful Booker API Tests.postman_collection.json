{
	"info": {
		"_postman_id": "922a3a02-ab1f-4c73-b0bf-29ad008853c6",
		"name": "Restful Booker API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37896799"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Generate Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body conatins a token\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.token).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test('Save Auth Token as an Collection variable', () => {\r",
									"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    pm.expect(pm.collectionVariables.get(\"token\")).to.eql(jsonData.token);\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"admin\",\r\n   \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Auth Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 401 or 403 for invalid credentials\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body conatins a message\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"reason\", \"Bad credentials\");\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"test\",\r\n   \"password\": \"test123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated Booking Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response first name as 'Jim'\", () => {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Jim\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response last name as 'Brown'\", () => {\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Brown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response total price as 111\", () => {\r",
									"    pm.expect(jsonData.booking.totalprice).to.eql(111);\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2018-02-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticated Delete Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err) {\r",
									"        var jsonData = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Validate status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains authentication-related requests, including generating an authentication token, validating invalid authentication attempts, sending authenticated"
		},
		{
			"name": "View Booking",
			"item": [
				{
					"name": "Get All Booking Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'bookingid' property\", () => {\r",
									"   pm.expect(jsonData[0]).to.have.property(\"bookingid\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Filtered Booking Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'bookingid' property\", () => {\r",
									"   pm.expect(jsonData[0]).to.have.property(\"bookingid\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking?checkin=2014-03-13",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2014-03-13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invalid Booking Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Validate status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Not Found'\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/14999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"14999"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API requests related to retrieving booking details. It includes endpoints for fetching all bookings, retrieving specific booking records using filters, and validating responses for invalid booking requests."
		},
		{
			"name": "Create Booking",
			"item": [
				{
					"name": "Valid Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response first name as 'Alan'\", () => {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Alan\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response last name as 'Brown'\", () => {\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Brown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response total price as 555\", () => {\r",
									"    pm.expect(jsonData.booking.totalprice).to.eql(555);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response deposit paid as true\", () => {\r",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response checkin date as '2024-01-01'\", () => {\r",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2024-01-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response checkout date as '2024-02-01'\", () => {\r",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2024-02-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response additional needs as 'Breakfast'\", () => {\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Alan\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 555,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-01\",\r\n        \"checkout\": \"2024-02-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Incomplete Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Validate status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Internal Server Error'\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalprice\": 555,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-01\",\r\n        \"checkout\": \"2024-02-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Validate status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Bad Request\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": ,\r\n    \"lastname\": ,\r\n    \"totalprice\": 555,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-01\",\r\n        \"checkout\": \"2024-02-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API requests related to creating new bookings. It includes endpoints for submitting valid booking requests, handling incomplete booking data, and testing scenarios with empty or malformed requests."
		},
		{
			"name": "Update Booking",
			"item": [
				{
					"name": "Valid PUT Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err) {\r",
									"        var jsonData = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated first name as 'Lavender'\", () => {\r",
									"    pm.expect(jsonData.firstname).to.eql(\"Lavender\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated last name as 'Brown'\", () => {\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated total price as 444\", () => {\r",
									"    pm.expect(jsonData.totalprice).to.eql(444);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response deposit paid as true\", () => {\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated checkin date as '2018-01-01'\", () => {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated checkout date as '2019-01-01'\", () => {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated additional needs as 'Lunch'\", () => {\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Lunch\");\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Lavender\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 444,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/25",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"25"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid PATCH Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err) {\r",
									"        var jsonData = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Validate status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response deposit paid as true\", () => {\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated checkin date as '2025-01-01'\", () => {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2025-01-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated checkout date as '2025-03-01'\", () => {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2025-03-01\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the response updated additional needs as 'Dinner'\", () => {\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Dinner\");\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-01-01\",\r\n        \"checkout\" : \"2025-03-01\"\r\n    },\r\n    \"additionalneeds\" : \"Dinner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/26",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"26"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API requests related to updating existing booking records. It includes endpoints for modifying booking details using both PUT (complete updates) and PATCH (partial updates) requests."
		},
		{
			"name": "Delete Booking",
			"item": [
				{
					"name": "Valid Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Created\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err) {\r",
									"        var jsonData = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate status code is 405\", () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Method Not Allowed\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: \"https://restful-booker.herokuapp.com/auth\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (!err) {\r",
									"        var jsonData = res.json();\r",
									"        pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token = {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/booking/00",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"00"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API requests related to removing booking records from the system. It includes endpoints for executing valid delete operations and handling invalid deletion attempts."
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Valid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Created\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response body contains 'Not Found'\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\"); \r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 2000ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ping",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains API requests designed to verify the availability and responsiveness of the system. It includes endpoints for checking the server's operational status, ensuring all services are running correctly, and identifying potential downtime or connectivity issues."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		}
	]
}